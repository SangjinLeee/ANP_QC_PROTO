-- -- 1. Database Creation
-- -- Create the database
-- CREATE DATABASE IF NOT EXISTS qcdb;
-- USE qcdb;

-- -- Create the lots table as the central table
-- CREATE TABLE IF NOT EXISTS lots (
--     lot_number VARCHAR(50) PRIMARY KEY,
--     product VARCHAR(50),
--     production_date DATE,
--     status VARCHAR(10) DEFAULT 'Pending'
-- );

-- -- Table for Solid Content
-- CREATE TABLE IF NOT EXISTS solid_content (
--     lot_number VARCHAR(50),
--     solid_content DECIMAL(5, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for CNT Content
-- CREATE TABLE IF NOT EXISTS cnt_content (
--     lot_number VARCHAR(50),
--     cnt_content DECIMAL(5, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for Viscosity
-- CREATE TABLE IF NOT EXISTS viscosity (
--     lot_number VARCHAR(50),
--     viscosity DECIMAL(10, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for Particle Size
-- CREATE TABLE IF NOT EXISTS particle_size (
--     lot_number VARCHAR(50),
--     particle_size DECIMAL(5, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for Moisture
-- CREATE TABLE IF NOT EXISTS moisture (
--     lot_number VARCHAR(50),
--     moisture DECIMAL(10, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for Electrical Resistance
-- CREATE TABLE IF NOT EXISTS electrical_resistance (
--     lot_number VARCHAR(50),
--     electrical_resistance DECIMAL(10, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for Magnetic Impurity
-- CREATE TABLE IF NOT EXISTS magnetic_impurity (
--     lot_number VARCHAR(50),
--     magnetic_impurity_sum DECIMAL(10, 2),
--     mag_Cr DECIMAL(10, 2),
--     mag_Fe DECIMAL(10, 2),
--     mag_Ni DECIMAL(10, 2),
--     mag_Zn DECIMAL(10, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );

-- -- Table for ICP (with elemental impurities like Ca, Cr, Cu, Fe, Na, etc.)
-- CREATE TABLE IF NOT EXISTS icp (
--     lot_number VARCHAR(50),
--     Ca DECIMAL(10, 2),
--     Cr DECIMAL(10, 2),
--     Cu DECIMAL(10, 2),
--     Fe DECIMAL(10, 2),
--     Na DECIMAL(10, 2),
--     Zn DECIMAL(10, 2),
--     Zr DECIMAL(10, 2),
--     Co DECIMAL(10, 2),
--     status VARCHAR(10) DEFAULT 'Pending',
--     FOREIGN KEY (lot_number) REFERENCES lots(lot_number) ON DELETE CASCADE
-- );


-- -- 2. Code to update status
-- UPDATE lots
-- SET status = (
--     CASE 
--         WHEN EXISTS (
--             SELECT 1 FROM solid_content WHERE solid_content.lot_number = lots.lot_number AND solid_content.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM cnt_content WHERE cnt_content.lot_number = lots.lot_number AND cnt_content.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM viscosity WHERE viscosity.lot_number = lots.lot_number AND viscosity.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM particle_size WHERE particle_size.lot_number = lots.lot_number AND particle_size.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM moisture WHERE moisture.lot_number = lots.lot_number AND moisture.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM electrical_resistance WHERE electrical_resistance.lot_number = lots.lot_number AND electrical_resistance.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM magnetic_impurity WHERE magnetic_impurity.lot_number = lots.lot_number AND magnetic_impurity.status = 'fail'
--         ) OR EXISTS (
--             SELECT 1 FROM icp WHERE icp.lot_number = lots.lot_number AND icp.status = 'fail'
--         )
--         THEN 'fail'
--         ELSE 'pass'
--     END
-- );




-- -- 3. Update NULL value management
-- -- Step 1: Set `status` to `NULL` in each QC test table if any relevant test column is `NULL`.
-- UPDATE icp
-- SET status = NULL
-- WHERE (Sn IS NULL OR Si IS NULL OR Ca IS NULL OR Cr IS NULL OR Cu IS NULL OR Zr IS NULL OR Fe IS NULL OR Na IS NULL OR Ni IS NULL OR Zn IS NULL OR Co IS NULL);

-- UPDATE solid_content
-- SET status = NULL
-- WHERE solid_content IS NULL;

-- UPDATE cnt_content
-- SET status = NULL
-- WHERE cnt_content IS NULL;

-- UPDATE particle_size
-- SET status = NULL
-- WHERE particle_size IS NULL;

-- UPDATE viscosity
-- SET status = NULL
-- WHERE viscosity IS NULL;

-- UPDATE moisture
-- SET status = NULL
-- WHERE moisture IS NULL;

-- UPDATE electrical_resistance
-- SET status = NULL
-- WHERE electrical_resistance IS NULL;

-- UPDATE magnetic_impurity
-- SET status = NULL
-- WHERE magnetic_impurity_sum IS NULL OR mag_Cr IS NULL OR mag_Fe IS NULL OR mag_Ni IS NULL OR mag_Zn IS NULL;

-- -- Step 2: Update the `status` in the `lots` table to `NULL` if any of the associated statuses are `NULL`.
-- UPDATE lots
-- SET status = NULL
-- WHERE 
--     EXISTS (SELECT 1 FROM icp WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM solid_content WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM cnt_content WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM particle_size WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM viscosity WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM moisture WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM electrical_resistance WHERE lot_number = lots.lot_number AND status IS NULL)
--     OR EXISTS (SELECT 1 FROM magnetic_impurity WHERE lot_number = lots.lot_number AND status IS NULL);

-- -- Step 3: Set `status` in `lots` to `PASS` if all QC statuses for the lot are `PASS` and none are `NULL`.
-- UPDATE lots
-- SET status = 'PASS'
-- WHERE 
--     status IS NOT NULL
--     AND NOT EXISTS (SELECT 1 FROM icp WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM solid_content WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM cnt_content WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM particle_size WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM viscosity WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM moisture WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM electrical_resistance WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL))
--     AND NOT EXISTS (SELECT 1 FROM magnetic_impurity WHERE lot_number = lots.lot_number AND (status != 'PASS' OR status IS NULL));

-- -- Step 1: Update each QC table to set `status` to NULL if all test values are NULL for a given lot.
-- UPDATE icp
-- SET status = NULL
-- WHERE Sn IS NULL AND Si IS NULL AND Ca IS NULL AND Cr IS NULL AND Cu IS NULL 
--       AND Zr IS NULL AND Fe IS NULL AND Na IS NULL AND Ni IS NULL AND Zn IS NULL AND Co IS NULL;

-- UPDATE solid_content
-- SET status = NULL
-- WHERE solid_content IS NULL;

-- UPDATE cnt_content
-- SET status = NULL
-- WHERE cnt_content IS NULL;

-- UPDATE particle_size
-- SET status = NULL
-- WHERE particle_size IS NULL;

-- UPDATE viscosity
-- SET status = NULL
-- WHERE viscosity IS NULL;

-- UPDATE moisture
-- SET status = NULL
-- WHERE moisture IS NULL;

-- UPDATE electrical_resistance
-- SET status = NULL
-- WHERE electrical_resistance IS NULL;

-- UPDATE magnetic_impurity
-- SET status = NULL
-- WHERE magnetic_impurity_sum IS NULL AND mag_Cr IS NULL AND mag_Fe IS NULL AND mag_Ni IS NULL AND mag_Zn IS NULL;

-- -- Step 2: Update the `status` in the `lots` table.
-- -- Set to "PASS" if all non-NULL statuses are "PASS".
-- UPDATE lots
-- SET status = 'PASS'
-- WHERE lot_number NOT IN (
--     SELECT lot_number
--     FROM (
--         SELECT lot_number
--         FROM icp WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM solid_content WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM cnt_content WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM particle_size WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM viscosity WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM moisture WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM electrical_resistance WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM magnetic_impurity WHERE status = 'FAIL'
--     ) AS failed_lots
-- )
-- AND lot_number IN (
--     SELECT lot_number
--     FROM (
--         SELECT lot_number
--         FROM icp WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM solid_content WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM cnt_content WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM particle_size WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM viscosity WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM moisture WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM electrical_resistance WHERE status = 'PASS'
--         UNION
--         SELECT lot_number
--         FROM magnetic_impurity WHERE status = 'PASS'
--     ) AS passed_lots
-- );

-- -- Step 3: Set `status` in `lots` to "FAIL" if any non-NULL status is "FAIL".
-- UPDATE lots
-- SET status = 'FAIL'
-- WHERE lot_number IN (
--     SELECT lot_number
--     FROM (
--         SELECT lot_number
--         FROM icp WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM solid_content WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM cnt_content WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM particle_size WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM viscosity WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM moisture WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM electrical_resistance WHERE status = 'FAIL'
--         UNION
--         SELECT lot_number
--         FROM magnetic_impurity WHERE status = 'FAIL'
--     ) AS failed_lots
-- );

-- -- Step 4: Set `lots.status` to `NULL` if all QC statuses are `NULL` for a lot.
-- UPDATE lots
-- SET status = NULL
-- WHERE lot_number NOT IN (
--     SELECT lot_number
--     FROM (
--         SELECT lot_number FROM icp WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM solid_content WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM cnt_content WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM particle_size WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM viscosity WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM moisture WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM electrical_resistance WHERE status IS NOT NULL
--         UNION
--         SELECT lot_number FROM magnetic_impurity WHERE status IS NOT NULL
--     ) AS non_null_status_lots
-- );
